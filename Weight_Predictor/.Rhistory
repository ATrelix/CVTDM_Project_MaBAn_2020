#remove(obesity_dum)
obesity_dummy <- subset(obesity_dummy[c(1:36)])
return(obesity_dummy)
}
obesity_dum = dummify(obesity_factor)
# Partitioning the data (60% training, 40% validation)
set.seed(1)
train.obs <- sample(rownames(obesity_dum), dim(obesity_dum)[1]*0.6)
train.set <- obesity_dum[train.obs, ]
set.seed(1)
valid.obs <- setdiff(rownames(obesity_dum), train.obs)
valid.set <- obesity_dum[valid.obs, ]
ggplot(data=obesity, aes(x=NObeyesdad)) +
geom_bar(aes(y = ..prop.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
# Creating histograms :
multi.hist(obesity[,2:4], density = TRUE)
# Creating boxplots :
par(mfrow = c(1, 3))
boxplot(obesity$Weight, ylab = "Weight")
boxplot(obesity$Height, ylab = "Height")
boxplot(obesity$Age, ylab = "Age")
#We may have ONE outlier for Weight, and almost one for Height!
#Age is VERY right skewed!
#comment on why we are not removing the outliers
# Barplots :
plot_1 = ggplot(data=obesity, aes(x=NObeyesdad)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_2 = ggplot(data=obesity, aes(x=main_meals)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_3 = ggplot(data=obesity, aes(x=Gender)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_4 = ggplot(data=obesity, aes(x=family_history)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_5 = ggplot(data=obesity, aes(x=vegetables)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_6 = ggplot(data=obesity, aes(x=food_inbetween)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_7 = ggplot(data=obesity, aes(x=tech_devices)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_8 = ggplot(data=obesity, aes(x=eat_caloric)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_9 = ggplot(data=obesity, aes(x=SMOKE)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_10 = ggplot(data=obesity, aes(x=CH2O)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_11 = ggplot(data=obesity, aes(x=monitor_cal)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_12 = ggplot(data=obesity, aes(x=physical_act)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_13 = ggplot(data=obesity, aes(x=alcohol)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_14 = ggplot(data=obesity, aes(x=MTRANS)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
# Arranging them two-by-two :
grid.arrange(plot_1, plot_2, ncol=2)
grid.arrange(plot_3, plot_4, ncol=2)
grid.arrange(plot_5, plot_6, ncol=2)
grid.arrange(plot_7, plot_8, ncol=2)
grid.arrange(plot_9, plot_10, ncol=2)
grid.arrange(plot_11, plot_12, ncol=2)
grid.arrange(plot_13, plot_14, ncol=2)
# Correlation plot
cor.plot(na.omit(obesity [c(2,3,4)]))
#comment on correlation and how we didnt do it for categorical variables
# Linear regression
#formula: Weight = Gender, Age, Height,
lm_weight <- lm(Weight ~ Gender + Age + Height + family_hist + eat_caloric + vegetables_sometimes +vegetables_always + main_meals_Btw_1_2 + main_meals_More_than_3 + food_inbetween_always + food_inbetween_frequently + food_inbetween_sometimes + smoke + CH2O_between_1_and_2 + CH2O_more_than_2 + monitor_cal + physical_act_1_2 +physical_act_2_4 + tech_1_hour+ tech_2_hours_or_more + alcohol_always + alcohol_frequently + alcohol_sometimes + mtrans_automobile + mtrans_bike + mtrans_public_transportation  , data = train.set)
summary(lm_weight)
plot(lm_weight)
#Stepwise model selection
#Forward
lm_forward_obesity <- step(lm_weight, direction = "forward")
summary(lm_forward_obesity)
#AIC: 6999.41
#Model : Weight ~ Gender + Age + Height + family_hist + eat_caloric + vegetables_sometimes + vegetables_always + main_meals_Btw_1_2 + main_meals_More_than_3 + food_inbetween_always + food_inbetween_frequently + food_inbetween_sometimes + smoke + CH2O_between_1_and_2 + CH2O_more_than_2 + monitor_cal + physical_act_1_2 + physical_act_2_4 + tech_1_hour + tech_2_hours_or_more + alcohol_always + alcohol_frequently + alcohol_sometimes + mtrans_automobile + mtrans_bike + mtrans_public_transportation
#Backward
lm_backward_obesity <- step(lm_weight, direction = "backward")
summary(lm_backward_obesity)
#formula: Weight ~ Gender + Age + Height + family_hist + eat_caloric + vegetables_sometimes + vegetables_always + main_meals_Btw_1_2 +  main_meals_More_than_3 + food_inbetween_frequently + CH2O_more_than_2 + monitor_cal + physical_act_1_2 + physical_act_2_4 + tech_1_hour + tech_2_hours_or_more + alcohol_sometimes + mtrans_automobile + mtrans_public_transportation
#AIC: 6988.52
#Both
lm_both_obesity <- step(lm_weight, direction = "both")
summary(lm_both_obesity)
#AIC: 6988.52
#model:Weight ~ Gender + Age + Height + family_hist + eat_caloric + vegetables_sometimes + vegetables_always + main_meals_Btw_1_2 + main_meals_More_than_3 + food_inbetween_frequently + CH2O_more_than_2 + monitor_cal + physical_act_1_2 + physical_act_2_4 + tech_1_hour + tech_2_hours_or_more + alcohol_sometimes + mtrans_automobile + mtrans_public_transportation
#Simplet model(both, backward)
#Add comments +Assumptions
#Predictions on the validation set
#Forward model:
forward_pred_obesity <- predict(lm_forward_obesity, valid.set)
#RMSE
gofRMSE(valid.set$Weight, forward_pred_obesity, dgt = 3) #16.376
#Mean error
gofME(valid.set$Weight, forward_pred_obesity, dgt = 3) #1.038
#MAPE
gofMAPE(valid.set$Weight, forward_pred_obesity, dgt = 3)#16.344
#Backward model:
backward_pred_obesity <- predict(lm_backward_obesity, valid.set)
#RMSE
gofRMSE(valid.set$Weight, backward_pred_obesity, dgt = 3) #16.416
#Mean error
gofME(valid.set$Weight, backward_pred_obesity, dgt = 3) #1.002
#MAPE
gofMAPE(valid.set$Weight, backward_pred_obesity, dgt = 3)#16.363
#Both model:
both_pred_obesity <- predict(lm_both_obesity, valid.set)
#RMSE
gofRMSE(valid.set$Weight, both_pred_obesity, dgt = 3) #16.416
#Mean error
gofME(valid.set$Weight, both_pred_obesity, dgt = 3) #1.002
#MAPE
gofMAPE(valid.set$Weight, both_pred_obesity, dgt = 3)#16.363
#Add comments +Assumptions
# Normalizing the data :
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
train.set.norm <- as.data.frame(lapply(train.set[, c(2:4)], normalize))
valid.set.norm <- as.data.frame(lapply(valid.set[, c(2:4)], normalize))
# Regrouping into final dataset, with replacement of non-normalized variables :
train.final <- cbind(train.set.norm, train.set[, c(1, 5:36)])
valid.final <- cbind(valid.set.norm, valid.set[, c(1, 5:36)])
denormalize <- function(x, y) {
return ((x*(max(y) - min(y))) + min(y))
}
# Creating dataframe :
rmse.df = data.frame(k = seq(1, 40, 1), RMSE = rep(0, 40))
# Running the model :
set.seed(1)
for(i in 1:40){
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
k_nn = as.numeric(as.character(knn.pred))
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
# Plotting results :
pander(rmse.df)
plot(rmse.df$k, rmse.df$RMSE, xlab = "# of Neighbors", ylab = "RMSE", main = "Selecting the best 'k'")
# Running the FINAL model (with k = 1):
set.seed(1)
k_nn <-
knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = 1
)
k_nn = as.numeric(as.character(k_nn))
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
RMSE
# First run a quite big tree (CP = 0.00001) :
set.seed(1)
tree_1 <- rpart(
Weight ~ .,
data = train.set,
method = "anova",
control = rpart.control(
cp = 0.00001,
minbucket = 1,
maxdepth = 10
)
)
# We do a CV : must locate in the table the point from which the CV error starts to rise :
printcp(tree_1)
set.seed(1)
tree_2 <- rpart(
Weight ~ .,
data = train.set,
method = "anova",
control = rpart.control(
cp = 0.0051561,
minbucket = 1,
maxdepth = 10
)
)
plot_tree = prp(
tree_2,
type = 1,
extra = 1,
under = TRUE,
split.font = 1,
varlen = -10
)
# First, let's create two vectors, one for the predicted values, and another for the actual values :
predicted_train <- predict(tree_2, train.set)
actual_train <- train.set$Weight
# And lastly, we make use of the RSME formula to calculate it :
RMSE_train = sqrt(mean((predicted_train-actual_train)^2))
RMSE_train
predicted_valid <- predict(tree_2, valid.set)
actual_valid <- valid.set$Weight
RMSE_valid = sqrt(mean((predicted_valid-actual_valid)^2))
RMSE_valid
par(mfrow = c(1, 2))
boxplot(
predicted_train,
actual_train,
names = c("Predicted", "Actual"),
ylab = "Weight",
xlab = "Training Set"
)
boxplot(
predicted_valid,
actual_valid,
names = c("Predicted", "Actual"),
ylab = "Weight",
xlab = "Validation Set"
)
plot(predicted-predicted_valid, ylab = "Error across models")
abline(h = 10)
abline(h = -10)
par(mfrow = c(1, 2))
# For KNN :
plot(predicted-valid.set[,4], main = "k-Nearest Neighbors", ylab = "Predicted - Actual (= error)")
abline(h = mean(predicted-valid.set[,4]))
# For tree :
plot(predicted_valid-valid.set[, 4], main = "Regression Tree", ylab = "Predicted - Actual (= error)")
abline(h = mean(predicted_valid-valid.set[, 4]))
# For k-NN :
mean(predicted-valid.set[,4])
# For tree :
mean(predicted_valid-valid.set[, 4])
# Creating dataframe :
ensemble_df <-
data.frame(
actual = valid.set[, 4],
MLR = backward_pred_obesity,
knn = predicted,
Regression_tree = predicted_valid,
Ensemble_Method = (predicted + predicted_valid + backward_pred_obesity) / 3
)
head(ensemble_df)
RMSE_ensemble = sqrt(mean((ensemble_df[, 5] - valid.set[, 4])^2))
RMSE_ensemble
RMSE_total.df = data.frame(
RMSE_MLR = 16.416,
RMSE_kNN = 15.02754,
RMSE_Tree = 13.25937,
RMSE_Ensemble = 11.39791
)
pander(RMSE_total.df)
# Creating a person for prediction :
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = 25
example.df$Height = 1.78
example.df$Weight = 70.0
example.df$family_history = "no"
example.df$eat_caloric = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "Two_hours"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_Weight"
example.df = to_factor(example.df)
obesity_example = rbind(obesity_factor, example.df)
obesity_example = dummify(obesity_example)
example.df = obesity_example[2112, ]
norm.values <- preProcess(obesity[, c(2:4)], method = "range")
example.norm <- predict(norm.values, example.df)
set.seed(1)
k_nn_example <-
knn(
train = train.final[, -3],
test = example.norm[, -4],
cl = train.final[, 3],
k = 1
)
k_nn_example = as.numeric(as.character(k_nn_example))
predicted_example_knn = denormalize(k_nn_example, valid.set[, 4])
predicted_example_tree = predict(tree_2, example.df)
predicted_example_mlr = predict(lm_backward_obesity, example.df)
ensemble_prediction = (predicted_example_knn + predicted_example_tree + predicted_example_mlr)/3
runApp()
set.seed(1)
k_nn.app <-
knn(
train = train.final[, -3],
test = app.norm[, -4],
cl = train.final[, 3],
k = 1
)
app.df = obesity_bin[1,]
app.df = to_factor(app.df)
app.big.df = rbind(obesity_factor, app.df)
app.big.df = dummify(app.big.df)
app.final.df = app.big.df[2112, ]
norm.app.values <- preProcess(obesity[, c(2:4)], method = "range")
app.norm <- predict(norm.app.values, app.final.df)
set.seed(1)
k_nn.app <-
knn(
train = train.final[, -3],
test = app.norm[, -4],
cl = train.final[, 3],
k = 1
)
k_nn.app = as.numeric(as.character(k_nn.app))
predicted.app = denormalize(k_nn.app, valid.set[, 4])
View(app.norm)
View(app.final.df)
runApp()
runApp()
runApp()
app.norm = predict(norm.app.values, app.final.df[, -4])
app.norm.ex = predict(norm.app.values, app.final.df[, -4])
app.norm = predict(norm.app.values, app.final.df)
app.norm = predict(norm.app.values, app.final.df)
k_nn.app <-
knn(
train = train.final[, -3],
test = app.norm[, -4],
cl = train.final[, 3],
k = 1
)
runApp()
app.norm.ex = predict(norm.app.values, app.final.df)
View(app.norm.ex)
k_nn.app = as.numeric(as.character(k_nn.app))
predicted.app = denormalize(k_nn.app, valid.set[, 4])
k_nn.app <-
knn(
train = train.final[, -3],
test = app.norm[, -4],
cl = train.final[, 3],
k = 1
)
k_nn.app = as.numeric(as.character(k_nn.app))
predicted.app = denormalize(k_nn.app, valid.set[, 4])
predict(k_nn.app, app.final.df)
k_nn.app <-
knn(
train = train.final[, -3],
test = app.norm[, -4],
cl = train.final[, 3],
k = 1
)
predict(k_nn.app, app.final.df)
app.norm.ex = predict(norm.app.values, app.final.df)
k_nn.app <-
knn(
train = train.final[, -3],
test = app.norm[, -4],
cl = train.final[, 3],
k = 1
)
predict(k_nn.app, app.final.df)
set.seed(1)
app.norm.ex = predict(norm.app.values, app.final.df)
k_nn.app <-
knn(
train = train.final[, -3],
test = app.norm[, -4],
cl = train.final[, 3],
k = 1
)
k_nn.app = as.numeric(as.character(k_nn.app))
predict(k_nn.app, app.final.df)
k_nn.app
app.norm.ex = predict(norm.app.values, app.final.df)
k_nn.app <-
knn(
train = train.final[, -3],
test = app.norm.ex[, -4],
cl = train.final[, 3],
k = 1
)
k_nn.app
k_nn.app = as.numeric(as.character(k_nn.app))
k_nn.app
predict(k_nn.app, app.final.df)
runApp()
app.norm.ex
k_nn.app <-
knn(
train = train.final[, -3],
test = app.norm.ex[, -4],
cl = train.final[, 3],
k = 1
)
k_nn.app = as.numeric(as.character(k_nn.app))
predicted.app = denormalize(k_nn.app, valid.set[, 4])
View(train.final)
runApp()
app.norm.ex
runApp()
runApp()
runApp()
runApp()
runApp()
app.final.df = predict(norm.app.values, app.final.df)
runApp()
runApp()
app.final.df = predict(norm.app.values, app.final.df)
app.final.df = predict(norm.app.values, app.final.df)
app.df = obesity_bin[1,]
app.df = to_factor(app.df)
app.big.df = rbind(obesity_factor, app.df)
app.big.df = dummify(app.big.df)
app.final.df = app.big.df[2112, ]
norm.app.values <- preProcess(obesity[, c(2:4)], method = "range")
app.final.norm = predict(norm.app.values, app.final.df)
View(app.final.norm)
predict(k_nn, app.final.norm)
app.final.norm = predict(norm.app.values, app.final.df)
predict(k_nn, app.final.norm)
runApp()
runApp()
runApp()
runApp()
runApp()
View(train.set)
runApp()
app.final.norm = predict(norm.app.values, app.final.df)
app.final.norm
View(app.final.norm)
app.final.norm[, 2] = (input$Q2 - min(train.set[, 2]))/(max(train.set[, 2]) - min(train.set[, 2]))
k_nn.app <-
knn(
train = train.final[, -3],
test = app.final.norm[, -4],
cl = train.final[, 3],
k = 1
)
k_nn.app
runApp()
runApp()
runApp()
knnFit <-
train(
Weight ~ .,
data = train.set,
method = "knn",
preProcess = c("center", "scale"),
tuneLength = 20
)
View(knnFit)
runApp()
runApp()
runApp('Weight_Predictor')
runApp()
runApp()
runApp()
runApp()
k_nn
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(1)
k_nn <-
train(
Weight ~ .,
data = train.set,
method = "knn",
trControl=trctrl,
preProcess = c("range"),
tuneLength = 20
)
k_nn
runApp()
k_nn <-
train(
Weight ~ .,
data = train.final,
method = "knn",
trControl=trctrl,
tuneLength = 20
)
k_nn
View(train.final)
runApp()
?train
runApp()
