k_nn <-
knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = 3
)
k_nn
as.numeric(k_nn)
as.numeric(as.character(k_nn))
k_nn = as.numeric(as.character(k_nn))
denormalize <- function(x, y) {
return ((x*(max(y)-min(y)))+min(y))
}
denormalize(k_nn, valid.set[, 4])
View(valid.set)
confusionMatrix(data = k_nn, valid.final[, 3]))
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
RMSE
k_nn <-
knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = 1
)
k_nn = as.numeric(as.character(k_nn))
denormalize <- function(x, y) {
return ((x*(max(y)-min(y)))+min(y))
}
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
RMSE
k_nn <-
knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = 21
)
k_nn = as.numeric(as.character(k_nn))
denormalize <- function(x, y) {
return ((x*(max(y)-min(y)))+min(y))
}
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
RMSE
k_nn <-
knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = 5
)
k_nn = as.numeric(as.character(k_nn))
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
RMSE
rmse.df = data.frame(k = seq(1, 20, 1), RMSE = rep(0, 20))
rmse.df = data.frame(k = seq(1, 20, 1), RMSE = rep(0, 20))
for(i in 1:20){
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
rmse.df
for(i in 1:20){
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
predicted = denormalize(k_nn.pred, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
for(i in 1:20){
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
predicted = denormalize(knn.pred, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
RMSE
rmse.df = data.frame(k = seq(1, 20, 1), RMSE = rep(0, 20))
for(i in 1:20){
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
predicted = denormalize(knn.pred, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
rmse.df
for(i in 1:20){
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
predicted = denormalize(knn.pred, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
for(i in 1:20){
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
k_nn = as.numeric(as.character(k_nn))
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
rmse.df
for(i in 1:20){
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
k_nn = as.numeric(as.character(knn.pred))
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
rmse.df
for(i in 1:20){
set.seed(1)
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
k_nn = as.numeric(as.character(knn.pred))
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
rmse.df
k_nn <-
knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = 2
)
k_nn = as.numeric(as.character(k_nn))
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
RMSE
set.seed(1)
k_nn <-
knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = 2
)
k_nn = as.numeric(as.character(k_nn))
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
RMSE
rmse.df
pander(rmse.df)
plot(rmse.df$k, rmse.df$RMSE)
for(i in 1:40){
set.seed(1)
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
k_nn = as.numeric(as.character(knn.pred))
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
for(i in 1:40){
set.seed(1)
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
k_nn = as.numeric(as.character(knn.pred))
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
pander(rmse.df)
rmse.df = data.frame(k = seq(1, 40, 1), RMSE = rep(0, 40))
for(i in 1:40){
set.seed(1)
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
k_nn = as.numeric(as.character(knn.pred))
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
for(i in 1:40){
set.seed(1)
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
k_nn = as.numeric(as.character(knn.pred))
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
pander(rmse.df)
pander(rmse.df)
plot(rmse.df$k, rmse.df$RMSE)
?plot
plot(rmse.df$k, rmse.df$RMSE, xlab = "# of Neighbors", ylab = "RMSE")
plot(rmse.df$k, rmse.df$RMSE, xlab = "# of Neighbors", ylab = "RMSE", main = "Selecting the best 'k'")
?data.frame
example.df = data.frame(colnames(valid.final))
example.df
example.df = data.frame(colnames(valid.final)= c(0,0,0))
rmse.df
colnames(valid.final)
View(obesity)
example.df = data.frame(colnames(obesity) = c("Female",	21,	1.62,	64.0,	"yes",	"no",	"Sometimes",	"Three",	"Sometimes",	"no",	"Between 1 and 2 L",	"no", "I do not have",	"0-2_hours",	"no",	"Public_Transportation",	"Normal_Weight"))
example.df = obesity[1,]
example.df
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = "25"
example.df$Height = "1.78"
example.df$Weight = "70.0"
example.df$family_history = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$CH2O = "Between 1 and 2 L	"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "0-2_hours	"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_weight"
example.df
example.norm <- as.data.frame(lapply(example.df[, c(2:4)], normalize))
example.norm <- preProcess(example.df[, c(2:4)], method = "range")
example_temp <- predict(example.norm, example.df)
example.df = cbind(example.df[1], example_temp, example.df[5:17])
example.df
example.norm <- preProcess(example.df[, c(2:4)], method = "range")
example_temp <- predict(example.norm, example.df)
example.df = cbind(example.df[1], example_temp, example.df[5:17])
example.df
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = "25"
example.df$Height = "1.78"
example.df$Weight = "70.0"
example.df$family_history = "no"
example.df$eat_caloric = "no"
example.df$vegetables = "Always"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L	"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_weight"
example.df
example.norm <- preProcess(example.df[, c(2:4)], method = "range")
example_temp <- predict(example.norm, example.df)
example_temp
example_temp <- predict(example.norm, example.df[, c(2:4)])
example_temp
example.norm <- preProcess(example.df[, c(2:4)], method = "range")
example.norm
example.norm <- preProcess(obesity[, c(2:4)], method = "range")
example_temp <- predict(example.norm, example.df[, c(2:4)])
example.norm
example_temp <- predict(example.norm, example.df)
example_temp <- predict(example.norm, example.df[, c(2:4)])
example.df = obesity[1, c(2:4)]
example.df
example.df$Age = "25"
example.df$Height = "1.78"
example.df$Weight = "70.0"
example.df
example.norm <- preProcess(obesity[, c(2:4)], method = "range")
example_temp <- predict(example.norm, example.df)
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = "25"
example.df$Height = "1.78"
example.df$family_history = "no"
example.df$eat_caloric = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L	"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "0-2_hours	"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_weight"
example.norm <- preProcess(obesity[, c(2:4)], method = "range")
example_temp <- predict(example.norm, example.df[, c(2:4)])
normalize_2(example.df[, c(2:4)], obesity[, c(2:4)])
normalize_2 <- function(x, y) {
return ((x - min(y)) / (max(y) - min(y)))
}
normalize_2(example.df[, c(2:4)], obesity[, c(2:4)])
example.df$Age = 25
example.df$Height = 1.78
example.df$Weight = 70.0
normalize_2 <- function(x, y) {
return ((x - min(y)) / (max(y) - min(y)))
}
normalize_2(example.df[, c(2:4)], obesity[, c(2:4)])
norm.values <- preProcess(obesity[, c(2:4)], method = "range")
example_temp <- predict(norm.values, example.df)
norm.values <- preProcess(obesity[, c(2:4)], method = "range")
example_temp <- predict(norm.values, example.df)
example_temp
example.df <- predict(norm.values, example.df)
example.df
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = 25
example.df$Height = 1.78
example.df$Weight = 70.0
example.df$family_history = "no"
example.df$eat_caloric = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L	"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "0-2_hours	"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_weight"
# Gender 1 = female, 0 = male
ex <- cbind(dummy(obesity$Gender, sep = "_"), example.df[2:17])
names(example.df)[1] <- c("Gender")
ex <- subset(ex, select = -c(2) )
example.df
View(ex)
# Gender 1 = female, 0 = male
ex <- cbind(dummy(obesity$Gender, sep = "_"), example.df[2:17])
names(ex)[1] <- c("Gender")
ex <- subset(ex, select = -c(2) )
ex
# Gender 1 = female, 0 = male
ex <- cbind(dummy(example.df$Gender, sep = "_"), example.df[2:17])
names(ex)[1] <- c("Gender")
ex <- subset(ex, select = -c(2) )
View(ex)
# family_history 1 = yes, 0 = no
ex <- cbind( example.df[1:4], dummy(example.df$family_hist, sep = "_"), example.df[6:17])
ex <- subset(example.df, select = -c(5) )
# family_history 1 = yes, 0 = no
ex <- cbind( example.df[1:4], dummy(example.df$family_hist, sep = "_"), example.df[6:17])
names(ex)[6] <- c("family_hist")
ex <- subset(example.df, select = -c(5) )
View(ex)
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = 25
example.df$Height = 1.78
example.df$family_history = "no"
example.df$eat_caloric = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L	"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "0-2_hours	"
example.df$alcohol = "no"
example.df$NObeyesdad = "Normal_weight"
# Gender 1 = female, 0 = male
ex <- cbind(dummy(example.df$Gender, sep = "_"), example.df[2:17])
names(ex)[1] <- c("Gender")
ex <- subset(ex, select = -c(2) )
View(ex)
View(ex)
# family_history 1 = yes, 0 = no
ex <- cbind( example.df[1:4], dummy(example.df$family_hist, sep = "_"), example.df[6:17])
names(ex)[6] <- c("family_hist")
ex <- subset(example.df, select = -c(5) )
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = 25
example.df$Height = 1.78
example.df$Weight = 70.0
example.df$family_history = "no"
example.df$eat_caloric = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L	"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "0-2_hours	"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_weight"
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = 25
example.df$Height = 1.78
example.df$Weight = 70.0
example.df$family_history = "no"
example.df$eat_caloric = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L	"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "0-2_hours	"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_weight"
# Gender 1 = female, 0 = male
ex <- cbind(dummy(example.df$Gender, sep = "_"), example.df[2:17])
names(ex)[1] <- c("Gender")
ex <- subset(ex, select = -c(2) )
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = 25
example.df$Height = 1.78
example.df$Weight = 70.0
example.df$family_history = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L	"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "0-2_hours	"
example.df$alcohol = "no"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_weight"
# Gender 1 = female, 0 = male
ex <- cbind(dummy(example.df$Gender, sep = "_"), example.df[2:17])
names(ex)[1] <- c("Gender")
# family_history 1 = yes, 0 = no
ex <- cbind( example.df[1:4], dummy(example.df$family_hist, sep = "_"), example.df[6:17])
names(ex)[4] <- c("family_hist")
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = 25
example.df$Height = 1.78
example.df$Weight = 70.0
example.df$family_history = "no"
example.df$eat_caloric = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L	"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "0-2_hours	"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_weight"
# Gender 1 = female, 0 = male
ex <- cbind(dummy(example.df$Gender, sep = "_"), example.df[2:17])
names(ex)[1] <- c("Gender")
# family_history 1 = yes, 0 = no
ex <- cbind( example.df[1:4], dummy(example.df$family_hist, sep = "_"), example.df[6:17])
names(ex)[5] <- c("family_hist")
# eat_caloric with 1 = yes, 0 = no
ex <- cbind( example.df[1:5], dummy(example.df$eat_caloric, sep = "_"), example.df[7:17])
names(ex)[6] <- c("eat_caloric")
# family_history 1 = yes, 0 = no
ex <- cbind( example.df[1:4], dummy(example.df$family_hist, sep = "_"), example.df[6:17])
names(ex)[5] <- c("family_hist")
