mean(predicted_valid-valid.set[, 4])
backward_pred_obesity
my_df <-
data.frame(
actual = valid.set[, 4],
MLR = backward_pred_obesity,
knn = predicted,
Regression_tree = predicted_valid,
Ensemble_Method = (predicted + predicted_valid) / 2
)
ensemble_df <-
data.frame(
actual = valid.set[, 4],
MLR = backward_pred_obesity,
knn = predicted,
Regression_tree = predicted_valid,
Ensemble_Method = (predicted + predicted_valid) / 2
)
ensemble_df
ensemble_df <-
data.frame(
actual = valid.set[, 4],
MLR = backward_pred_obesity,
knn = predicted,
Regression_tree = predicted_valid,
Ensemble_Method = (predicted + predicted_valid + backward_pred_obesity) / 3
)
ensemble_df
head(ensemble_df)
plot(predicted-predicted_valid, ylab = "Error across models")+
abline(h = 10)+
abline(h = -10)
plot(predicted-predicted_valid, ylab = "Error across models")
abline(h = 10)
abline(h = -10)
head(printcp(tree_1))
pander(printcp(tree_1))
head(pander(printcp(tree_1)))
head(pander(printcp(tree_1)))
RMSE_ensemble = sqrt(mean((ensemble_df[, 5] - valid.set[, 4])^2))
# To adjust the page margins when knitting to PDF :
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=45),tidy=TRUE)
# Used packages :
library(pander)
library(dplyr)
library(gt)
library(car)
library(ggplot2)
library(gridExtra)
library(psych)
library(corrplot)
library(ellipse)
library(dummies)
library(nnet)
library(class)
library(caret)
library(rpart)
library(rpart.plot)
library(ehaGoF)
library(forecast)
library(randomForest)
# Working Directory :
setwd("~/GitHub/CVTDM_Project_MaBAn_2020")
# Reading the data :
obesity <- read.csv("Obesity.csv", header=T, sep=",")
attach(obesity)
obesity_original <- obesity
# Small metadata table :
tibble_table <-
tibble(
"Variable Name" = c(colnames(obesity)[1:14], "", colnames(obesity)[15:17]),
Description = c("Gender", "Age", "Height", "Weight", "Has a family member suffered or suffers from overweight?", "Do you eat high caloric food frequently?", "Do you usually eat vegetables in your meals?", "How many main meals do you have daily?", "Do you eat any food between meals?", "Do you smoke?", "How much water do you drink daily?", "Do you monitor the calories you eat daily?", "How often do you have physical activity?", "How much time do you use technological devices such as", "cell phone videogames, television, computer and others?", "How often do you drink alcohol?", "Which transportation do you usually use?", "Obesity level based on calculation of Mass Body Index")
)
metadata <- gt(data = tibble_table)
metadata %>%
tab_header(title = md("**Metadata**"),
subtitle = "from the dataset we are using") %>%
tab_source_note(source_note = "Based on information in :
https://www.sciencedirect.com/science/article/pii/S2352340919306985")
pander(head(obesity))
# Changing column names:
names(obesity)[5] = "family_history"
names(obesity)[6] = "eat_caloric"
names(obesity)[7] = "vegetables"
names(obesity)[8] = "main_meals"
names(obesity)[9] = "food_inbetween"
names(obesity)[12] = "monitor_cal"
names(obesity)[13] = "physical_act"
names(obesity)[14] = "tech_devices"
names(obesity)[15] = "alcohol"
# Checking the dataset structure :
pander(str(obesity))
pander(summary(obesity[, 2:4]))
# Binning some numerical variables :
binning <- function(x) {
#vegetables
x$vegetables[x$vegetables <= 1] <- "Never"
x$vegetables[x$vegetables > 1 & x$vegetables <=2] <- "Sometimes"
x$vegetables[x$vegetables > 2 & x$vegetables <=3] <- "Always"
#main_meals
x$main_meals[x$main_meals >= 1 & x$main_meals < 3] <- "Btw_1_&_2"
x$main_meals[x$main_meals == 3] <- "Three"
x$main_meals[x$main_meals > 3 & x$main_meals <= 4] <- "More_than_3"
#tech_devices
x$tech_devices[x$tech_devices >= 0 & x$tech_devices <= 0.5] <- "Zero_hours"
x$tech_devices[x$tech_devices <= 1.5] <- "One_hour"
x$tech_devices[x$tech_devices <= 2] <- "Two_hours"
#physical_act
x$physical_act[x$physical_act < 1] <- "I do not have"
x$physical_act[x$physical_act >= 1 & x$physical_act <= 2] <- "1 or 2 days"
x$physical_act[x$physical_act >= 2 & x$physical_act <= 4] <- "2 or 4 days"
x$physical_act[x$physical_act >= 4 & x$physical_act <= 5] <- "4 or 5 days"
#CH2O
x$CH2O[x$CH2O <= 1] <- "Less than a liter"
x$CH2O[x$CH2O <= 2] <- "Between 1 and 2 L"
x$CH2O[x$CH2O <=3] <- "More than 2 L"
return(x)
}
obesity = binning(obesity)
# Converting character variables to factor :
to_factor <- function(x) {
x$Gender = as.factor(x$Gender)
x$family_history = as.factor(x$family_history)
x$eat_caloric = as.factor(x$eat_caloric)
x$food_inbetween = as.factor(x$food_inbetween)
x$SMOKE = as.factor(x$SMOKE)
x$monitor_cal = as.factor(x$monitor_cal)
x$alcohol = as.factor(x$alcohol)
x$MTRANS = as.factor(x$MTRANS)
x$NObeyesdad = as.factor(x$NObeyesdad)
x$vegetables = as.factor(x$vegetables)
x$main_meals= as.factor(x$main_meals)
x$CH2O= as.factor(x$CH2O)
x$physical_act= as.factor(x$physical_act)
x$tech_devices= as.factor(x$tech_devices)
return(x)
}
obesity = to_factor(obesity)
# Checking if there are Missing Values :
sum(is.na(obesity))
# Dummyfing the binary variables(family_history, eat_caloric, SMOKE, and monitor_cal) :
# Gender 1 = female, 0 = male
obesity_dummy <- cbind(dummy(obesity$Gender, sep = "_"), obesity[2:17])
names(obesity_dummy)[1] <- c("Gender")
obesity_dummy <- subset(obesity_dummy, select = -c(2) )
# family_history 1 = yes, 0 = no
obesity_dummy <- cbind( obesity_dummy[1:4], dummy(obesity_dummy$family_hist, sep = "_"), obesity_dummy[6:17])
names(obesity_dummy)[6] <- c("family_hist")
obesity_dummy <- subset(obesity_dummy, select = -c(5) )
# eat_caloric with 1 = yes, 0 = no
obesity_dummy <- cbind( obesity_dummy[1:5], dummy(obesity_dummy$eat_caloric, sep = "_"), obesity_dummy[7:17])
names(obesity_dummy)[7] <- c("eat_caloric")
obesity_dummy <- subset(obesity_dummy, select = -c(6) )
# SMOKE 1 = yes, 0 = no
obesity_dummy <- cbind( obesity_dummy[1:9], dummy(obesity_dummy$SMOKE, sep = "_"), obesity_dummy[11:17])
names(obesity_dummy)[11] <- c("smoke")
obesity_dummy <- subset(obesity_dummy, select = -c(10) )
# monitor_cal 1 = yes, 0 = no
obesity_dummy <- cbind( obesity_dummy[1:11], dummy(obesity_dummy$monitor_cal, sep = "_"), obesity_dummy[13:17])
names(obesity_dummy)[13] <- c("monitor_cal")
obesity_dummy <- subset(obesity_dummy, select = -c(12) )
# Dummmyfying the categorical variables
# vegetables
obesity_dum <- cbind(obesity_dummy[1:6], dummy(obesity_dummy$vegetables, sep = "_"), obesity_dummy[8:17])
names(obesity_dum)[7:9] <- c("vegetables_never","vegetables_sometimes","vegetables_always")
# main_meals
obesity_dum <- cbind(obesity_dum[1:9], dummy(obesity_dum$main_meals, sep = "_"), obesity_dum[11:19])
names(obesity_dum)[10:12] <- c("main_meals_Btw_1_2","main_meals_More_than_3","main_meals_three")
# food_in_between
obesity_dum <- cbind(obesity_dum[1:12], dummy(obesity_dum$food_inbetween, sep = "_"), obesity_dum[14:21])
names(obesity_dum)[13:16] <- c("food_inbetween_always","food_inbetween_frequently","food_inbetween_no", "food_inbetween_sometimes")
# alcohol
obesity_dum <- cbind(obesity_dum[1:21], dummy(obesity_dum$alcohol, sep = "_"), obesity_dum[23:24])
names(obesity_dum)[22:25] <- c("alcohol_always","alcohol_frequently","alcohol_no", "alcohol_sometimes")
# MTRANS
obesity_dum <- cbind(obesity_dum[1:25], dummy(obesity_dum$MTRANS, sep = "_"), obesity_dum[27])
names(obesity_dum)[26:30] <- c("mtrans_automobile","mtrans_bike","mtrans_motorbike", "mtrans_public_transportation", "mtrans_walking")
# CH2O
obesity_dum <- cbind(obesity_dum[1:17], dummy(obesity_dum$CH2O, sep = "_"), obesity_dum[19:31])
names(obesity_dum)[18:20] <- c("CH2O_less_than_a_liter","CH2O_between_1_and_2","CH2O_more_than_2")
# physical_act
obesity_dum <- cbind(obesity_dum[1:21], dummy(obesity_dum$physical_act, sep = "_"), obesity_dum[23:33])
names(obesity_dum)[22:24] <- c("physical_act_do_not_have","physical_act_1_2","physical_act_2_4")
# tech_devices : this one is a little bit tricky since there a many categories but only one is represented within the data!
obesity_dum <- cbind(obesity_dum[1:24], dummy(obesity_dum$tech_devices, sep = "_"), obesity_dum[26:35])
names(obesity_dum)[25:27] <- c("tech_0_hours", "tech_1_hour", "tech_2_hours_or_more")
#remove(obesity_dum)
obesity_dum <- subset(obesity_dum[c(1:36)])
# Partitioning the data (60% training, 40% validation)
set.seed(1)
train.obs <- sample(rownames(obesity_dum), dim(obesity_dum)[1]*0.6)
train.set <- obesity_dum[train.obs, ]
set.seed(1)
valid.obs <- setdiff(rownames(obesity_dum), train.obs)
valid.set <- obesity_dum[valid.obs, ]
ggplot(data=obesity, aes(x=NObeyesdad)) +
geom_bar(aes(y = ..prop.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
# Creating histograms :
multi.hist(obesity[,2:4], density = TRUE)
# Creating boxplots :
par(mfrow = c(1, 3))
boxplot(obesity$Weight, ylab = "Weight")
boxplot(obesity$Height, ylab = "Height")
boxplot(obesity$Age, ylab = "Age")
#We may have ONE outlier for Weight, and almost one for Height!
#Age is VERY right skewed!
#comment on why we are not removing the outliers
# Barplots :
plot_1 = ggplot(data=obesity, aes(x=NObeyesdad)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_2 = ggplot(data=obesity, aes(x=main_meals)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_3 = ggplot(data=obesity, aes(x=Gender)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_4 = ggplot(data=obesity, aes(x=family_history)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_5 = ggplot(data=obesity, aes(x=vegetables)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_6 = ggplot(data=obesity, aes(x=food_inbetween)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_7 = ggplot(data=obesity, aes(x=tech_devices)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_8 = ggplot(data=obesity, aes(x=eat_caloric)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_9 = ggplot(data=obesity, aes(x=SMOKE)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_10 = ggplot(data=obesity, aes(x=CH2O)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_11 = ggplot(data=obesity, aes(x=monitor_cal)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_12 = ggplot(data=obesity, aes(x=physical_act)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_13 = ggplot(data=obesity, aes(x=alcohol)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
plot_14 = ggplot(data=obesity, aes(x=MTRANS)) +
geom_bar(aes(y = ..count.., group = 1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_text(stat='count', aes(label=..count..), vjust=-0.5, size=2.2)
# Arranging them two-by-two :
grid.arrange(plot_1, plot_2, ncol=2)
grid.arrange(plot_3, plot_4, ncol=2)
grid.arrange(plot_5, plot_6, ncol=2)
grid.arrange(plot_7, plot_8, ncol=2)
grid.arrange(plot_9, plot_10, ncol=2)
grid.arrange(plot_11, plot_12, ncol=2)
grid.arrange(plot_13, plot_14, ncol=2)
# Correlation plot
cor.plot(na.omit(obesity [c(2,3,4)]))
#comment on correlation and how we didnt do it for categorical variables
# Linear regression
#formula: Weight = Gender, Age, Height,
lm_weight <- lm(Weight ~ Gender + Age + Height + family_hist + eat_caloric + vegetables_sometimes +vegetables_always + main_meals_Btw_1_2 + main_meals_More_than_3 + food_inbetween_always + food_inbetween_frequently + food_inbetween_sometimes + smoke + CH2O_between_1_and_2 + CH2O_more_than_2 + monitor_cal + physical_act_1_2 +physical_act_2_4 + tech_1_hour+ tech_2_hours_or_more + alcohol_always + alcohol_frequently + alcohol_sometimes + mtrans_automobile + mtrans_bike + mtrans_public_transportation  , data = train.set)
summary(lm_weight)
plot(lm_weight)
#Stepwise model selection
#Forward
lm_forward_obesity <- step(lm_weight, direction = "forward")
summary(lm_forward_obesity)
#AIC: 6999.41
#Model : Weight ~ Gender + Age + Height + family_hist + eat_caloric + vegetables_sometimes + vegetables_always + main_meals_Btw_1_2 + main_meals_More_than_3 + food_inbetween_always + food_inbetween_frequently + food_inbetween_sometimes + smoke + CH2O_between_1_and_2 + CH2O_more_than_2 + monitor_cal + physical_act_1_2 + physical_act_2_4 + tech_1_hour + tech_2_hours_or_more + alcohol_always + alcohol_frequently + alcohol_sometimes + mtrans_automobile + mtrans_bike + mtrans_public_transportation
#Backward
lm_backward_obesity <- step(lm_weight, direction = "backward")
summary(lm_backward_obesity)
#formula: Weight ~ Gender + Age + Height + family_hist + eat_caloric + vegetables_sometimes + vegetables_always + main_meals_Btw_1_2 +  main_meals_More_than_3 + food_inbetween_frequently + CH2O_more_than_2 + monitor_cal + physical_act_1_2 + physical_act_2_4 + tech_1_hour + tech_2_hours_or_more + alcohol_sometimes + mtrans_automobile + mtrans_public_transportation
#AIC: 6988.52
#Both
lm_both_obesity <- step(lm_weight, direction = "both")
summary(lm_both_obesity)
#AIC: 6988.52
#model:Weight ~ Gender + Age + Height + family_hist + eat_caloric + vegetables_sometimes + vegetables_always + main_meals_Btw_1_2 + main_meals_More_than_3 + food_inbetween_frequently + CH2O_more_than_2 + monitor_cal + physical_act_1_2 + physical_act_2_4 + tech_1_hour + tech_2_hours_or_more + alcohol_sometimes + mtrans_automobile + mtrans_public_transportation
#Simplet model(both, backward)
#Add comments +Assumptions
#Predictions on the validation set
#Forward model:
forward_pred_obesity <- predict(lm_forward_obesity, valid.set)
#RMSE
gofRMSE(valid.set$Weight, forward_pred_obesity, dgt = 3) #16.376
#Mean error
gofME(valid.set$Weight, forward_pred_obesity, dgt = 3) #1.038
#MAPE
gofMAPE(valid.set$Weight, forward_pred_obesity, dgt = 3)#16.344
#Backward model:
backward_pred_obesity <- predict(lm_backward_obesity, valid.set)
#RMSE
gofRMSE(valid.set$Weight, backward_pred_obesity, dgt = 3) #16.416
#Mean error
gofME(valid.set$Weight, backward_pred_obesity, dgt = 3) #1.002
#MAPE
gofMAPE(valid.set$Weight, backward_pred_obesity, dgt = 3)#16.363
#Both model:
both_pred_obesity <- predict(lm_both_obesity, valid.set)
#RMSE
gofRMSE(valid.set$Weight, both_pred_obesity, dgt = 3) #16.416
#Mean error
gofME(valid.set$Weight, both_pred_obesity, dgt = 3) #1.002
#MAPE
gofMAPE(valid.set$Weight, both_pred_obesity, dgt = 3)#16.363
#Add comments +Assumptions
# Normalizing the data :
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
train.set.norm <- as.data.frame(lapply(train.set[, c(2:4)], normalize))
valid.set.norm <- as.data.frame(lapply(valid.set[, c(2:4)], normalize))
# Regrouping into final dataset, with replacement of non-normalized variables :
train.final <- cbind(train.set.norm, train.set[, c(1, 5:36)])
valid.final <- cbind(valid.set.norm, valid.set[, c(1, 5:36)])
denormalize <- function(x, y) {
return ((x*(max(y) - min(y))) + min(y))
}
# Creating dataframe :
rmse.df = data.frame(k = seq(1, 40, 1), RMSE = rep(0, 40))
# Running the model :
set.seed(1)
for(i in 1:40){
knn.pred = knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = i
)
k_nn = as.numeric(as.character(knn.pred))
predicted = denormalize(k_nn, valid.set[, 4])
rmse.df[i, 2] = sqrt(mean((predicted-valid.set[, 4])^2))
}
# Plotting results :
pander(rmse.df)
plot(rmse.df$k, rmse.df$RMSE, xlab = "# of Neighbors", ylab = "RMSE", main = "Selecting the best 'k'")
# Running the FINAL model (with k = 1):
set.seed(1)
k_nn <-
knn(
train = train.final[, -3],
test = valid.final[, -3],
cl = train.final[, 3],
k = 1
)
k_nn = as.numeric(as.character(k_nn))
predicted = denormalize(k_nn, valid.set[, 4])
RMSE = sqrt(mean((predicted-valid.set[, 4])^2))
RMSE
# First run a quite big tree (CP = 0.00001) :
set.seed(1)
tree_1 <- rpart(
Weight ~ .,
data = train.set,
method = "anova",
control = rpart.control(
cp = 0.00001,
minbucket = 1,
maxdepth = 10
)
)
# We do a CV : must locate in the table the point from which the CV error starts to rise :
printcp(tree_1)
set.seed(1)
tree_2 <- rpart(
Weight ~ .,
data = train.set,
method = "anova",
control = rpart.control(
cp = 0.0051561,
minbucket = 1,
maxdepth = 10
)
)
plot_tree = prp(
tree_2,
type = 1,
extra = 1,
under = TRUE,
split.font = 1,
varlen = -10
)
# First, let's create two vectors, one for the predicted values, and another for the actual values :
predicted_train <- predict(tree_2, train.set)
actual_train <- train.set$Weight
# And lastly, we make use of the RSME formula to calculate it :
RMSE_train = sqrt(mean((predicted_train-actual_train)^2))
RMSE_train
predicted_valid <- predict(tree_2, valid.set)
actual_valid <- valid.set$Weight
RMSE_valid = sqrt(mean((predicted_valid-actual_valid)^2))
RMSE_valid
par(mfrow = c(1, 2))
boxplot(
predicted_train,
actual_train,
names = c("Predicted", "Actual"),
ylab = "Weight",
xlab = "Training Set"
)
boxplot(
predicted_valid,
actual_valid,
names = c("Predicted", "Actual"),
ylab = "Weight",
xlab = "Validation Set"
)
plot(predicted-predicted_valid, ylab = "Error across models")
abline(h = 10)
abline(h = -10)
par(mfrow = c(1, 2))
# For KNN :
plot(predicted-valid.set[,4], main = "k-Nearest Neighbors", ylab = "Predicted - Actual (= error)")
abline(h = mean(predicted-valid.set[,4]))
# For tree :
plot(predicted_valid-valid.set[, 4], main = "Regression Tree", ylab = "Predicted - Actual (= error)")
abline(h = mean(predicted_valid-valid.set[, 4]))
# For k-NN :
mean(predicted-valid.set[,4])
# For tree :
mean(predicted_valid-valid.set[, 4])
# Creating dataframe :
ensemble_df <-
data.frame(
actual = valid.set[, 4],
MLR = backward_pred_obesity,
knn = predicted,
Regression_tree = predicted_valid,
Ensemble_Method = (predicted + predicted_valid + backward_pred_obesity) / 3
)
head(ensemble_df)
RMSE_ensemble = sqrt(mean((ensemble_df[, 5] - valid.set[, 4])^2))
RMSE
# Creating a person for prediction :
example.df = obesity[1,]
example.df$Gender = "Male"
example.df$Age = 25
example.df$Height = 1.78
example.df$Weight = 70.0
example.df$family_history = "no"
example.df$eat_caloric = "no"
example.df$vegetables = "Always"
example.df$main_meals = "More_than_3"
example.df$food_inbetween = "no"
example.df$SMOKE = "no"
example.df$CH2O = "Between 1 and 2 L"
example.df$monitor_cal = "no"
example.df$physical_act = "2 or 4 days"
example.df$tech_devices = "0-2_hours"
example.df$alcohol = "no"
example.df$MTRANS = "Walking"
example.df$NObeyesdad = "Normal_weight"
norm.values <- preProcess(obesity[, c(2:4)], method = "range")
example.norm <- predict(norm.values, example.df)
example.df = to_factor(example.df)
#example.df = dummy(example.df)   Create a SINGLE function for dummyfication (need to eliminate the _dummy dataset)
#predict(k_nn, example.df)
#predict(tree_2, example.df)
#...
#for Multiple Linear Regression, simply replace coefficients and variable values into the formula to get the predicted weight. Maybe create a function called "MLR()" for this!
RMSE_ensemble
RMSE_ensemble = sqrt(mean((ensemble_df[, 5] - valid.set[, 4])^2))
RMSE_ensemble
RMSE_total.df = data.frame(
"RMSE for MLR" = 16.416,
"RMSE for k-NN" = 15.02754,
"RMSE for Tree" = 13.25937,
"RMSE for Ensemble" = 11.39791,
)
RMSE_total.df = data.frame(
RMSE_MLR = 16.416,
RMSE_k-NN = 15.02754,
RMSE_total.df = data.frame(
RMSE_MLR = "16.416",
RMSE_k-NN = 15.02754,
RMSE_total.df = data.frame(
RMSE_MLR = "16.416",
RMSE_k-NN = "15.02754",
RMSE_total.df = data.frame(
RMSE_MLR = 16.416,
RMSE_kNN = 15.02754,
RMSE_Tree = 13.25937,
RMSE_Ensemble = 11.39791,
)
RMSE_total.df = data.frame(
RMSE_MLR = 16.416,
RMSE_kNN = 15.02754,
RMSE_Tree = 13.25937,
RMSE_Ensemble = 11.39791
)
RMSE_total.df
pander(RMSE_total.df)
